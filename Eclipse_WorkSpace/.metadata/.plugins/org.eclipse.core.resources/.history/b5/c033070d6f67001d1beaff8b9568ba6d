package Login;
import java.util.ArrayList;

import Assets.Logo;
import Assets.CustomScanner;
import MainSystem.MainMenu;
import messageHandler.ConsoleHandler;
import messageHandler.MessageHandler;
public class SwitchController {
    private static ArrayList<String>loggedInUsers = new ArrayList<>();
    public static String focusUser;
    public SwitchController(){
        loggedInUsers.add("Temp");
    }

    public static String updateCurrentUser(String currentUser){
        if(!loggedInUsers.contains(currentUser)){
            loggedInUsers.add(currentUser);
            MessageHandler.handleMessage(1, "User: " + currentUser + " was added to the list of logged in users", true);
        }
        MessageHandler.handleMessage(1, currentUser + " requested focus", false);
        focusUser = currentUser;
        return Login.getCurrentUser();
    }

    public static void removeCurrentUser(String currentUser){
        MessageHandler.handleMessage(-1, "Attempting to Log out User: " + currentUser, false);
        if(loggedInUsers.contains(focusUser)){
            MessageHandler.handleMessage(2, currentUser + " Logging out!", true);
            loggedInUsers.remove(currentUser);
            MessageHandler.handleMessage(-1, currentUser + " Logged out!", true);
            MessageHandler.handleMessage(1, "Attempting to Switch Focus User to Last logged in User in CurrentUser list", false);
            int size = loggedInUsers.size();
            if(size > 0){
                size --;
                MessageHandler.handleMessage(1, "User: " + loggedInUsers.get(size) + "Needs password to login... Moving to LoginScreen", true);
                focusUser = loggedInUsers.get(size);
                Login.LoginScreen(loggedInUsers.get(size));
            }else{
                MessageHandler.handleMessage(-1, "No Users are logged in... Switching to Login Screen", true);
                focusUser = "Null";
                Login.LoginScreen();
            } 
        }else {
            MessageHandler.handleMessage(-1, "No Current Users detected. Unable to remove CurrentUser from list", true);
            Login.LoginScreen();
        }
    }

    public static boolean forceLogoff(String user){
        if(loggedInUsers.contains(user)){
            loggedInUsers.remove(user);
            MessageHandler.handleMessage(-1, user + " Logged out!", true);
            return true;
        }else {
            MessageHandler.handleMessage(-1, user + " is not logged in", true);
            return false;
        }
    }

    public static boolean forceAllLogoff(){
        loggedInUsers.clear();
        MessageHandler.handleMessage(1, "All Users Logged Off", true);
        return true;
    }

    public static void switchMenu(int mode) {
        Logo.displayLogo();
        System.out.println("Switch User Menu; Current user: " + focusUser);
        if(loggedInUsers.size() >= 2){
            MessageHandler.handleMessage(2, "Select a user to log in as", true);
            int x = 1;
            System.out.println("[0]: Go Back");
            for(int i = 0; i < loggedInUsers.size(); i++){
                System.out.println("[" + x + "]: " + loggedInUsers.get(i));
                x++;
            }
            ConsoleHandler.getConsole();
            String person = CustomScanner.nextLine().toLowerCase();
            if(person.equals("back") || person.equals("0")){
                if(mode == 1){
                    Login.LoginScreen();
                }else if(mode == 2){
                    MainMenu.mainMenu();
                }
            }else{
                int personAsInt = Integer.parseInt(person);
                if(personAsInt == 0){
                    Login.LoginScreen();
                }
                personAsInt--;
                if(loggedInUsers.get(personAsInt).equals(focusUser)) {
                	MainMenu.mainMenu();
                }
                Login.LoginScreen(loggedInUsers.get(personAsInt));
            }
        }else{
        	MessageHandler.handleMessage(-1, "No other Logged in users", true);
            Login.LoginScreen();
        }
    }
}
